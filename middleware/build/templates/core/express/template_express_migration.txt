'use strict';
module.exports = {
  up: (queryInterface, Sequelize) => {
    return queryInterface.createTable('local_table_name', {


      <<<sequelizePrimaryFields>>>
      "local_primary_field_name": {
        allowNull: false,
        primaryKey: true,
        autoIncrement: local_primary_autoincrement,
        type: 'Sequelize.local_primary_type'
      },
      >>>sequelizePrimaryFields<<<
      <<<sequelizeBigintFields>>>
      "local_bigint_field_name": {
        type: 'Sequelize.BIGINT'
      },
      >>>sequelizeBigintFields<<<
      <<<sequelizeTinyintFields>>>
      "local_tinyint_field_name": {
        type: 'Sequelize.TINYINT'
      },
      >>>sequelizeTinyintFields<<<
      <<<sequelizeIntegerFields>>>
      "local_integer_field_name": {
        type: 'Sequelize.INTEGER',
        length: local_integer_length,
      },
      >>>sequelizeIntegerFields<<<
      <<<sequelizeFloatFields>>>
      "local_float_field_name": {
        type: 'Sequelize.FLOAT',
        length: local_float_length,
        decimals: local_float_decimals
      },
      >>>sequelizeFloatFields<<<
      <<<sequelizeDecimalFields>>>
      "local_decimal_field_name": {
        type: 'Sequelize.DECIMAL',
        length: local_decimal_length,
        decimals: local_decimal_decimals
      },
      >>>sequelizeDecimalFields<<<
      <<<sequelizeDoubleFields>>>
      "local_double_field_name": {
        type: 'Sequelize.DOUBLE',
      },
      >>>sequelizeDoubleFields<<<
      <<<sequelizeBoolFields>>>
      "local_boolean_field_name": {
        type: 'Sequelize.BOOLEAN'
      },
      >>>sequelizeBoolFields<<<
      <<<sequelizeVarcharFields>>>
      "local_varchar_field_name": {
        type: 'Sequelize.STRING',
        length: local_varchar_length
      },
      >>>sequelizeVarcharFields<<<
      <<<sequelizeTextFields>>>
      "local_text_field_name": {
        type: 'Sequelize.TEXT',
      },
      >>>sequelizeTextFields<<<
      <<<sequelizeIndexFields>>>
      "local_index_field_name": {
        type: 'Sequelize.local_index_type',
        references: {
            model: {tableName:'foreign_table_name'},
            key: 'foreign_table_primary'
        },
        onUpdate: 'CASCADE',
        onDelete: 'SET NULL'
      },
      >>>sequelizeIndexFields<<<
      <<<sequelizeDateFields>>>
      "local_date_field_name": {
        type: 'Sequelize.DATE'
      },
      >>>sequelizeDateFields<<<
      <<<sequelizeBlobFields>>>
      "local_blob_field_name": {
        type: 'Sequelize.BLOB',
        length: ''
      },
      >>>sequelizeBlobFields<<<
      <<<sequelizeCharFields>>>
      "local_char_field_name": {
        type: 'Sequelize.CHAR',
        length: local_char_length
      },
      >>>sequelizeCharFields<<<

    });
  },
  down: (queryInterface, Sequelize) => {
    return queryInterface.dropTable('local_table_name');
  }
};
