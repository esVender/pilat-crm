/**
 * Created by @ES Express Systems
 * User: #userCreated
 * Date: #dateCreated
 * Time: #timeCreated
 * Last User updated: #userUpdated
 * Last date updated: #dateUpdated
 * Last time updated: #timeUpdated
 *
 * Caution: es-sections will be replaced by script execution
 */
 
//<es-section>
const lcObjSLocalTableNameService = require('../services/local_table_name.service');
//</es-section>
require('../../../utils/Prototipes');
const Util = require('../../../utils/Utils');
const util = new Util();

// Controller for DB Mongoose

//<es-section>

//</es-section>

//<es-section>

const lcObjPLocalTableNameCtrl = {};
lcObjPLocalTableNameCtrl.service = lcObjSLocalTableNameService;

<<<sequelizeDefaultControllerFunctions>>>
lcObjPLocalTableNameCtrl.getAllUcObjPLocalTableName = async (req, res) => {
    try {
        const objUcObjPLocalTableName = await lcObjSLocalTableNameService.getAllUcObjPLocalTableName(req.query);
        if (objUcObjPLocalTableName.length > 0) {
            util.setSuccess(200, 'UcObjPLocalTableName retrieved', objUcObjPLocalTableName);
        } else {
            util.setSuccess(200, 'No lcObjSLocalTableName found');
        }
        return util.send(res);
    } catch(e) {
        util.setError(400, e);
        return util.send(res);
    }
}

lcObjPLocalTableNameCtrl.getAUcObjSLocalTableName = async (req, res) => {
    try {
        const { lcObjLocalPrimaryName } = req.params;
        if (!util.isUcObjLocalPrimaryType(lcObjLocalPrimaryName)) {
            util.setError(400, 'Please input a valid UcObjLocalPrimaryType value');
            return util.send(res);
        }
        const objUcObjSLocalTableName = await lcObjSLocalTableNameService.getAUcObjSLocalTableName(lcObjLocalPrimaryName, req.query);
        if (!objUcObjSLocalTableName) {
            util.setError(404, `Cannot find lcObjSLocalTableName with the id ${lcObjLocalPrimaryName}`);
        } else {
            util.setSuccess(200, 'Found lcObjSLocalTableName', objUcObjSLocalTableName);
        }
        return util.send(res);
    } catch (e) {
        util.setError(400, e);
        return util.send(res);
    }
}

lcObjPLocalTableNameCtrl.addUcObjSLocalTableName = async (req, res) => {
    try {
        const objUcObjSLocalTableName = await lcObjSLocalTableNameService.addUcObjSLocalTableName(req.body);
        util.setSuccess(201, 'UcObjSLocalTableName Added!', objUcObjSLocalTableName);
        return util.send(res);
    } catch (e) {
        util.setError(400, e);
        return util.send(res);
    }
}

lcObjPLocalTableNameCtrl.updateUcObjSLocalTableName = async (req, res) => {
    try {
        const { lcObjLocalPrimaryName } = req.params;
        if (!util.isUcObjLocalPrimaryType(lcObjLocalPrimaryName)) {
            util.setError(400, 'Please input a valid UcObjLocalPrimaryType value');
            return util.send(res);
        }
        const objUcObjSLocalTableName = await lcObjSLocalTableNameService.updateUcObjSLocalTableName(lcObjLocalPrimaryName, req.body);
        if (!objUcObjSLocalTableName) {
            util.setError(404, `Cannot find lcObjSLocalTableName with the id: ${lcObjLocalPrimaryName}`);
        } else {
            util.setSuccess(200, 'UcObjSLocalTableName updated', objUcObjSLocalTableName);
        }
        return util.send(res);
    } catch (e) {
        util.setError(400, e);
        return util.send(res);
    }
};

lcObjPLocalTableNameCtrl.deleteUcObjSLocalTableName = async (req, res) => {
    try {
        const { lcObjLocalPrimaryName } = req.params;
        if (!util.isUcObjLocalPrimaryType(lcObjLocalPrimaryName)) {
            util.setError(400, 'Please provide a UcObjLocalPrimaryType value');
            return util.send(res);
        }
        const objUcObjSLocalTableName = await lcObjSLocalTableNameService.deleteUcObjSLocalTableName(lcObjLocalPrimaryName);
        if (objUcObjSLocalTableName) {
            util.setSuccess(200, 'UcObjSLocalTableName deleted', objUcObjSLocalTableName);
        } else {
            util.setError(404, `UcObjSLocalTableName with the id ${lcObjLocalPrimaryName} cannot be found`);
        }
        return util.send(res);
    } catch (e) {
        util.setError(400, e);
        return util.send(res);
    }
};
>>>sequelizeDefaultControllerFunctions<<<

<<<sequelizeFindOneByFieldsCtrlFunctions>>>
lcObjPLocalTableNameCtrl.findOneByUcObjLocalCommonFieldName = async (req, res) => {
    try {
        const { lcObjLocalFieldName } = req.params;
        const objUcObjSLocalTableName = await lcObjSLocalTableNameService.findOneByUcObjLocalCommonFieldName(lcObjLocalFieldName, req.query);
        if (!objUcObjSLocalTableName) {
            util.setError(404, `Cannot find lcObjSLocalTableName with the lcObjLocalCommonFieldName ${lcObjLocalCommonFieldName}`);
        } else {
            util.setSuccess(200, 'Found lcObjSLocalTableName', objUcObjSLocalTableName);
        }
        return util.send(res);
    } catch(e) {
        util.setError(400, e);
        return util.send(res);
    }
}
>>>sequelizeFindOneByFieldsCtrlFunctions<<<

<<<sequelizeUpdateByFieldsCtrlFunctions>>>
lcObjPLocalTableNameCtrl.updateUcObjSLocalTableNameByUcObjLocalCommonFieldName = async (req, res) => {
     const { lcObjLocalFieldName } = req.params;
        try {
            if (!util.isUcObjLocalPrimaryFieldType(lcObjLocalPrimaryFieldName)) {
                util.setError(400, 'Please input a valid UcObjLocalPrimaryFieldType value');
                return util.send(res);
            }
            const objUcObjSLocalTableName = await lcObjSLocalTableNameService.updateUcObjSLocalTableNameByUcObjLocalCommonFieldName(lcObjLocalFieldName, req.body);
            if (!objUcObjSLocalTableName) {
                util.setError(404, `Cannot find lcObjSLocalTableName with the id: ${lcObjLocalPrimaryFieldName}`);
            } else {
                util.setSuccess(200, 'UcObjSLocalTableName updated', objUcObjSLocalTableName);
            }
            return util.send(res);
        } catch (e) {
            util.setError(400, e);
            return util.send(res);
        }
}
>>>sequelizeUpdateByFieldsCtrlFunctions<<<

<<<sequelizeStoreCtrlFunctions>>>
lcObjPLocalTableNameCtrl.findUcObjPForeignTableNameUcObjlocalStoreFieldNameWithUcObjForeignStoreFieldNameWithLabel = async (req, res) => {
    try {
        const { select } = req.params;
        const lcObjPLocalTableName = await lcObjSLocalTableNameService.findUcObjPForeignTableNameUcObjlocalStoreFieldNameWithUcObjForeignStoreFieldNameWithLabel(select, req.query);
        if (lcObjPLocalTableName.length > 0) {
            util.setSuccess(200, 'UcObjPLocalTableName retrieved', lcObjPLocalTableName);
        } else {
            util.setSuccess(200, 'No lcObjSLocalTableName found');
        }
        return util.send(res);
    } catch(e) {
        util.setError(400, e);
        return util.send(res);
    }
}
>>>sequelizeStoreCtrlFunctions<<<

<<<sequelizeStoreFilterControllerFunctions>>>
lcObjPLocalTableNameCtrl.filterUcObjPLocalTableNameByUcObjlocalStoreFieldName = async (req, res) => {
    try {
        const { lcObjLocalFieldName } = req.params;
        const lcObjPLocalTableName = await lcObjSLocalTableNameService.filterUcObjPLocalTableNameByUcObjlocalStoreFieldName(lcObjLocalFieldName, req.query);
        if (lcObjPLocalTableName.length > 0) {
            util.setSuccess(200, 'UcObjPLocalTableName retrieved', lcObjPLocalTableName);
        } else {
            util.setSuccess(200, 'No lcObjSLocalTableName found');
        }
        return util.send(res);
    } catch(e) {
        util.setError(400, e);
        return util.send(res);
    }
}
>>>sequelizeStoreFilterControllerFunctions<<<


//</es-section>

//<es-section>
module.exports = lcObjPLocalTableNameCtrl;
//</es-section>
