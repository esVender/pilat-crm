/**
 * Created by @ES Express Systems
 * User: #userCreated
 * Date: #dateCreated
 * Time: #timeCreated
 * Last User updated: #userUpdated
 * Last date updated: #dateUpdated
 * Last time updated: #timeUpdated
 *
 * Caution: es-sections will be replaced by script execution
 */

import { Injectable } from '@angular/core';
import {environment} from "../../environments/environment";
import {HttpClient,HttpErrorResponse} from "@angular/common/http";
import '../../helpers/utils';
import {BehaviorSubject} from "rxjs";

//<es-section>
import {UcObjPLocalTableName} from "../models/lcObjPLocalTableName";
//</es-section>

@Injectable({
  providedIn: 'root'
})
export class UcObjSLocalTableNameService {

  //<es-section>
  basePath: string = `${environment.backend.server.webpath}/api-pilatsrl/local-table-name`;
  dataChange: BehaviorSubject<UcObjPLocalTableName[]> = new BehaviorSubject<UcObjPLocalTableName[]>([]);
  lcObjSLocalTableNameData: UcObjPLocalTableName = new UcObjPLocalTableName();
  //</es-section>

  constructor(private http: HttpClient) { }

  get data(): UcObjPLocalTableName[] {
    return this.dataChange.value;
  }

  getDataUcObjPLocalTableName(select = [], where = {}, order = [], limit:number = null, offset:number = null): void {
    this.getAllUcObjPLocalTableName(select, where, order, limit, offset).subscribe(async (res) => {
      let response = res as {status: string, message:string, data:UcObjPLocalTableName[]};
      this.dataChange.next(response.data);
    },(error: HttpErrorResponse) => {
      console.log (error.name + ' ' + error.message);
    });
  }

  //<es-section>
  <<<angularServiceFunctions>>>
  getAllUcObjPLocalTableName(select = [], where = {}, order = [], limit:number = null, offset:number = null) {
    let attributes = '';
    if(select.length) {
        attributes += 'select=' + select.toString() + '&';
    }
    if(Object.keys(where).length) {
        attributes += 'where=' + JSON.stringify(where) + '&';
    }
    if(order.length) {
        attributes += 'order=' + JSON.stringify(order) + '&';
    }
    if(limit) {
        attributes += 'limit=' + limit + '&';
    }
    if(offset) {
        attributes += 'offset=' + offset + '&';
    }
    return this.http.get(this.basePath + '?' + attributes);
  }
  createUcObjSLocalTableName(lcObjSLocalTableName:UcObjPLocalTableName) {
    return this.http.post(this.basePath, lcObjSLocalTableName);
  }
  getUcObjSLocalTableName(id:any) {
    return this.http.get(this.basePath + '/' + id);
  }
  updateUcObjSLocalTableName(id:any, lcObjSLocalTableName:UcObjPLocalTableName) {
    return this.http.put(this.basePath + '/' + id, lcObjSLocalTableName);
  }
  deleteUcObjSLocalTableName(id:any) {
    return this.http.delete(this.basePath + '/' + id);
  }

  >>>angularServiceFunctions<<<
  <<<angularFindOneByFieldsServiceFunctions>>>
  findOneByUcObjLocalCommonFieldName(lcObjLocalFieldName:any, select = []) {
      let attributes = '';
      if(select.length) {
          attributes += 'select=' + select.toString();
      }
      return this.http.get(this.basePath + '/findOneByUcObjLocalCommonFieldName/' + lcObjLocalFieldName + '?' + attributes);
  }
  >>>angularFindOneByFieldsServiceFunctions<<<
  <<<angulaUpdateServiceFunctions>>>
  updateUcObjSLocalTableNameByUcObjLocalCommonFieldName(lcObjLocalFieldName:any, lcObjSLocalTableName:UcObjPLocalTableName) {
      return this.http.post(this.basePath + '/updateUcObjSLocalTableNameByUcObjLocalCommonFieldName?lcObjLocalFieldName=' + lcObjLocalFieldName, lcObjSLocalTableName);
  }
  >>>angulaUpdateServiceFunctions<<<
  <<<angularStoreServiceFunctions>>>
  findUcObjPForeignTableNameUcObjlocalStoreFieldNameWithUcObjForeignStoreFieldNameWithLabel(select = []) {
      let attributes = '';
      if(select.length) {
           attributes += 'select=' + select.toString();
      }
      return this.http.get(this.basePath + '/findUcObjPForeignTableNameUcObjlocalStoreFieldNameWithUcObjForeignStoreFieldNameWithLabel' + '?' + attributes);
  }
  >>>angularStoreServiceFunctions<<<
  <<<angulaFilterServiceFunctions>>>
  filterUcObjPLocalTableNameByUcObjlocalStoreFieldName(ids:any, level:number = 0, select = [], order = []) {
        let attributes = '';
        if(select.length) {
             attributes += 'select=' + select.toString() + '&';
        }
        if(order.length) {
             attributes += 'order=' + JSON.stringify(order) + '&';
        }
        if(level) {
             attributes += 'level=' + level + '&';
        }
        return this.http.get(this.basePath + '/filterUcObjPLocalTableNameByUcObjlocalStoreFieldName/' + ids + '?' + attributes);
  }
  >>>angulaFilterServiceFunctions<<<
  //</es-section>
}
